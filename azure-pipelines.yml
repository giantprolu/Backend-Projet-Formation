trigger:
- master
- Dev

pr:
- master
- Dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  zipFileName: 'projetEPS.zip' 
  group: SyncSecrets

steps:
- task: NuGetToolInstaller@1
- checkout: none

- script: |
    git config --global user.email "nathan.chavaudra@exakis-nelite.com"
    git config --global user.name "Nathan CHAVAUDRA"
    REPO_AZURE="https://$(AZURE_DEVOPS_PAT)@dev.azure.com/nathanchavaudra/Projet-Formation-Exakis-Nelite/_git/Backend-Projet-Formation"
    REPO_GITHUB="https://$(GITHUB_USERNAME):$(GITHUB_TOKEN)@github.com/giantprolu/Backend-Projet-Formation.git"
    git clone --mirror "$REPO_AZURE" backend-repo
    cd backend-repo
    git remote add github "$REPO_GITHUB"
    git push --mirror github
  displayName: 'Sync Backend Repo'
  env:
    AZURE_DEVOPS_PAT: $(AZURE_DEVOPS_PAT)
    GITHUB_TOKEN: $(GITHUB_TOKEN)
    GITHUB_USERNAME: $(GITHUB_USERNAME)
- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    dotnet tool install --global dotnet-reportgenerator-globaltool
    dotnet tool install --global dotnet-sonarscanner
  displayName: 'Install .NET tools'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(solution)'
  displayName: 'restore'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'build'
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/TestAPI/TestAPI.csproj'
    arguments: '--configuration $(buildConfiguration) --logger trx --collect:"XPlat Code Coverage" --diag:log.txt'
  displayName: 'test'
- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'  

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    zipAfterPublish: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
  displayName: 'ZIP'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/API.zip'
    artifactName: 'API'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/Minimal.zip'
    artifactName: 'Minimal'

    