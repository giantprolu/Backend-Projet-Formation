trigger:
- master
- Dev

pr:
- master
- Dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  zipFileName: 'projetEPS.zip' 

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- script: |
    dotnet tool install --global dotnet-reportgenerator-globaltool
    dotnet tool install --global dotnet-sonarscanner
  displayName: 'Install .NET tools'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/TestAPI/TestAPI.csproj'
    arguments: '--configuration $(buildConfiguration) --logger trx --collect:"XPlat Code Coverage"'

- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'  
- script: |
    echo "Displaying log file content..."
    cat $(Build.SourcesDirectory)/log.txt  # Lire log.txt pour les erreurs.
  displayName: 'Display Test Log'
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    zipAfterPublish: true
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    


- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/API.zip'
    artifactName: 'API'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/Minimal.zip'
    artifactName: 'Minimal'

